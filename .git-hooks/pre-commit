#!/bin/bash
# Pre-commit hook to verify YubiKey presence and authentication
# This hook ensures that commits are only allowed when a YubiKey is present

set -e

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

# Function to log messages
log_info() {
    echo -e "${GREEN}[INFO]${NC} $1"
}

log_warn() {
    echo -e "${YELLOW}[WARN]${NC} $1"
}

log_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

# Function to check if YubiKey is present
check_yubikey_presence() {
    log_info "Checking for YubiKey presence..."
    
    # Check for YubiKey using ykman (YubiKey Manager)
    if command -v ykman &> /dev/null; then
        if ykman info &> /dev/null; then
            log_info "YubiKey detected via ykman"
            return 0
        fi
    fi
    
    # Check for YubiKey using system_profiler (macOS)
    if command -v system_profiler &> /dev/null; then
        if system_profiler SPUSBDataType | grep -i "yubikey\|yubico" &> /dev/null; then
            log_info "YubiKey detected via system_profiler"
            return 0
        fi
    fi
    
    # Check for YubiKey using lsusb (if available)
    if command -v lsusb &> /dev/null; then
        if lsusb | grep -i "yubikey\|yubico" &> /dev/null; then
            log_info "YubiKey detected via lsusb"
            return 0
        fi
    fi
    
    # Check for YubiKey using ioreg (macOS)
    if command -v ioreg &> /dev/null; then
        if ioreg -p IOUSB -w0 | grep -i "yubikey\|yubico" &> /dev/null; then
            log_info "YubiKey detected via ioreg"
            return 0
        fi
    fi
    
    # Check for YubiKey using dmesg (if available)
    if command -v dmesg &> /dev/null; then
        if dmesg | grep -i "yubikey\|yubico" &> /dev/null; then
            log_info "YubiKey detected via dmesg"
            return 0
        fi
    fi
    
    return 1
}

# Function to verify YubiKey authentication
verify_yubikey_auth() {
    log_info "Verifying YubiKey authentication..."
    
    # Check if YubiKey is responding to authentication
    if command -v ykman &> /dev/null; then
        # Try to get YubiKey info which requires authentication
        if ykman info &> /dev/null; then
            log_info "YubiKey authentication successful"
            return 0
        fi
    fi
    
    # Alternative: Check for PIV authentication
    if command -v ykman &> /dev/null; then
        if ykman piv info &> /dev/null; then
            log_info "YubiKey PIV authentication successful"
            return 0
        fi
    fi
    
    # Alternative: Check for FIDO2 authentication
    if command -v ykman &> /dev/null; then
        if ykman fido info &> /dev/null; then
            log_info "YubiKey FIDO2 authentication successful"
            return 0
        fi
    fi
    
    return 1
}

# Function to prompt for YubiKey touch
prompt_yubikey_touch() {
    log_info "Please touch your YubiKey to authenticate..."
    
    # Give user time to touch the YubiKey
    sleep 2
    
    # Check if authentication was successful
    if verify_yubikey_auth; then
        log_info "YubiKey touch authentication successful"
        return 0
    else
        log_warn "YubiKey touch authentication failed or timeout"
        return 1
    fi
}

# Main verification logic
main() {
    log_info "Starting YubiKey verification for commit..."
    
    # Check if YubiKey is present
    if ! check_yubikey_presence; then
        log_error "YubiKey not detected. Please insert your YubiKey and try again."
        log_error "Commit blocked for security reasons."
        exit 1
    fi
    
    # Verify YubiKey authentication
    if ! verify_yubikey_auth; then
        log_warn "YubiKey authentication failed. Attempting touch authentication..."
        
        if ! prompt_yubikey_touch; then
            log_error "YubiKey authentication failed. Commit blocked for security reasons."
            exit 1
        fi
    fi
    
    log_info "YubiKey verification successful. Proceeding with commit..."
    
    # Optional: Log commit details
    log_info "Commit details:"
    log_info "  Author: $(git config user.name) <$(git config user.email)>"
    log_info "  Branch: $(git branch --show-current 2>/dev/null || echo 'detached HEAD')"
    log_info "  Files: $(git diff --cached --name-only | wc -l | tr -d ' ') files staged"
    
    exit 0
}

# Run main function
main "$@"
